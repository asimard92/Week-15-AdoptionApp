{"ast":null,"code":"var _jsxFileName = \"/Users/amandasimard/Desktop/Promineo/Week-15/Lab/src/App.js\",\n  _s = $RefreshSig$();\n/* \n  Copyright (c) 2023 Promineo Tech\n  Author:  Promineo Tech Academic Team\n  Subject:  React Week 15 - REST, Fetch, Functional Components, and Best Practices\n  FE Lab Week 15\n*/\n\n/* ----------------------------------------------------- */\n// Key Term List:\n// REST\n// RESTful API\n// CRUD: Create Read Update Delete\n// HTTP Methods: POST, GET, PUT/PATCH, DELETE\n// Fetch\n// Functional Component\n// Spread Operator\n// Destructuring\n// Hooks\n// useState\n// useEffect\n// Async/Await\n// JSON.stringify()\n// fetch(URL, options)\n// onClick={(e) => myFunction(e)}\n// onChange={(e) => setState(e.target.value)}\n// onSubmit={(e) => myFunction(e)}\n//          // e.preventDefault()\n//\n\n/* ----------------------------------------------------- */\n// Please do not alter the existing code unless instructed to do so.\n// Read the comments and add your code where it is specified for each question.\n/* ----------------------------------------------------- */\n\n/**\n * For step-by-step instruction, check the README.md\n */\n\n/*------------------------ Part 1: REST & Fetch ------------------------*/\n\n/**\n * Fetch documentation: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n *\n *                      Make sure you set up a API that you can CRUD to, such as mockAPI or use\n *                      a JSON server like in the week 11/12 labs.\n *\n *                      The lab solution will use mockAPI - but you MUST update the endpoint with your own\n *                      or the CRUD operations will not work. Do not copy the API link in the lab solution.\n *\n * Part 1: Create a new const variable called: API_URL , and set it to your URL.\n *\n *         Create 4 functions, getUsers(){}, deleteUser(){}, updateUser(){}, and postNewUser(){}.\n */\n\n/*------------------------ Part 1: Setting up GET ------------------------*/\n/*\n *         Setting up getUsers() function:\n *\n * Step 1: First, let's create a place (state) to save the users from our API.\n *\n * Step 2: In our getUsers function:\n *         1) Use fetch(URL) to get from the API\n *         2) Convert the data to JSON\n *         3) setUsers() to result of that data.\n *\n\n *\n * Step 3: Use the useEffect and getUsers() to re-render our component on change:\n *\n */\n\n/*------------------------ Part 2: Setting up DELETE ------------------------*/\n\n/**\n * Reminder: fetch(url, {options})\n *\n * Step 1: Put id as a parameter in our deleteUser() function, and update\n *         our URL in fetch(API_URL) with the id parameter.\n *\n * Step 2: Add method: \"DELETE\" key/value pair to our options object\n *\n * Step 3: call .then(() => getUsers()) after your fetch() to ensure that our component\n *         gets re-rendered with the updated information.\n */\n\n/*------------------------ Part 3: Setting up POST ------------------------*/\n\n/**\n * Step 1: Inside our postNewUser() function, set up fetch() to POST.\n *\n *         Reminder: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n *\n * Step 2: Create 3 new variables with useState(): newUserName, newUserJobTitle, newUserCompanyName\n *\n *         Set them to an empty string\n *\n *         Update the body: {} part of our fetch() to POST with our new variables.\n */\n\n/*------------------------ Part 4: Setting up UPDATE ------------------------*/\n\n/** Disclaimer: There are MANY ways to handle UPDATE.\n *              This is only one way. We will be creating a form for each user,\n *              passing in a userObject to our updateUser() function, then updating the user with fetch()\n *\n *              Consider other ways after the lab is completed.\n *\n * Step 1: Set up fetch() to UPDATE in our updateUser() function.\n *         Pass in userObject as a parameter.\n *         Be sure to update the URL with userObject.id\n *\n *         Reminder: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n *\n *         Consider the necessary options key:value pairs; method/headers/body\n *\n * Step 2: Create 3 new variables with useState() like we did for POST, but for UPDATE:\n *         updatedName, updatedJobTitle, and updatedCompanyName\n *\n * Step 3: Inside the updateUser() function body, create a new variable: updatedUserObject\n *         updatedUserObject should be userObject, with it's updated name/title/company name\n *\n */\n\n/*------------------------ Part 5: Connecting All the Pieces ------------------------*/\n\n/**\n * Step 1:  Connecting our GET:\n *\n *          .map over our users variable and display every users name/jobTitle/companyName\n *\n * Step 2: Connecting our DELETE:\n *\n *         Under our map, give every user a button to delete. Return of the trash-bin: ðŸ—‘\n *         It's not in a form, so we don't need event.preventDefault()\n *\n *         use .then(() => getUsers()) after our fetch to re-render the\n *         page with the updated information.\n *\n * Step 3: Connecting our POST:\n *\n *         Create a form above your .map method to post a new user.\n *\n *         Use the onChange property and setMyVariable() on each corresponding input\n *\n *         Connect your postNewUser() function to your form button.\n *\n *         We do need event.preventDefault() because it's inside of a form.\n *\n *         You should now be POSTing new users! Is your state re-rendering?\n *         If not, your hint in how is in Part 2: Setting up DELETE\n *\n * Step 4: Connecting our UPDATE:\n *\n *     1)  There's MANY ways to handle UPDATE.\n *\n *         For this example, we're going to give every user a form to update their:\n *         name, job title, and company name.\n *\n *     2)   Inside our .map() method, below our delete button,\n *          create a new form with labels/inputs for\n *          Update name, update job title, update company name.\n *          Include a button at the bottom (this will update on click).\n *\n *     3)   Set up the onChange property on your inputs similiar to Step 3: Connecting our POST\n *\n *     4)   Give your button an onClick property. Connect your updateUser() function to it.\n *\n *          For this function, we have two goals:\n *       1. Prevent the button from refreshing the page\n *       2. Pass in a an entire user object.\n *\n *          Set up your onClick to do both.\n *\n *     5)   Test it out! Your update should now be working!\n *          Make sure the page is re-rendering with the updated information\n *          and not refreshing the page.\n *\n * Optional: Set the input values in your update form to be equal to user.name/user.jobTitle etc,\n *           so they don't initially submit empty strings.\n *\n */\n\n/*-- ALL IMPORTS HERE -- */\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOCK_API_URL = 'https://645e56dd12e0a87ac0edd618.mockapi.io/user';\nfunction App() {\n  _s();\n  /* -- YOUR CODE/CRUD OPERATIONS HERE --*/\n\n  const [users, setUsers] = useState([{}]);\n  const [newUserName, setNewUserName] = useState('');\n  const [newUserJobTitle, setNewUserJobTitle] = useState('');\n  const [newUserCompanyName, setNewUserCompanyname] = useState('');\n  const [updatedName, setUpdatedName] = useState('');\n  const [updatedJobTitle, setUpdatedJobTitle] = useState('');\n  const [updatedCompanyName, setUpdatedCompanyName] = useState('');\n  function getUsers() {\n    fetch(MOCK_API_URL).then(data => data.json()).then(data => setUsers(data));\n  }\n  useEffect(() => {\n    getUsers();\n    console.log(users);\n  }, []);\n  function deleteUser(id) {\n    fetch(`${MOCK_API_URL}/${id}`, {\n      method: 'DELETE'\n    }).then(() => getUsers());\n  }\n  function postNewUser() {\n    fetch(MOCK_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: newUserName,\n        jobTitle: newUserJobTitle,\n        companyName: newUserCompanyName\n      })\n    }).then(() => getUsers());\n  }\n  function updateUser(userObject) {\n    let updatedUserObject = {\n      ...userObject,\n      name: updatedName,\n      jobTitle: updatedJobTitle,\n      companyName: updatedCompanyName\n    };\n    fetch(`${MOCK_API_URL}/${userObject.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedUserObject),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(() => getUsers());\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: users.map(user)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vOI5+xAxwEeBOkqUqocgewlKEA4=\");\n_c = App;\nexport default App;\n\n/**\n *     While this lab focused mostly on functionality over practicality,\n *     here's a couple ideas you can try implementing to make the UI/UX more user-friendly:\n *\n *    1: Having a form laid out for EVERY user isn't very UI friendly, nor realistic.\n *       Consider using a styling library like Bootstrap React/MaterialUI/SemanticUI to put\n *       each of those forms in a modal. The form inside the modal only pops up when a\n *       \"update user\" button gets clicked, and only updates the user when that modal gets submitted.\n *\n * Docs: https://react-bootstrap.github.io/components/modal/\n *\n *\n *    2: Organize the users somehow. You can use a table, CSS grid/flex.\n *       Possibly put all the users in a container, and look at the CSS property overflow:\n *\n * Docs: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\n *\n */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","MOCK_API_URL","App","users","setUsers","newUserName","setNewUserName","newUserJobTitle","setNewUserJobTitle","newUserCompanyName","setNewUserCompanyname","updatedName","setUpdatedName","updatedJobTitle","setUpdatedJobTitle","updatedCompanyName","setUpdatedCompanyName","getUsers","fetch","then","data","json","console","log","deleteUser","id","method","postNewUser","headers","body","JSON","stringify","name","jobTitle","companyName","updateUser","userObject","updatedUserObject","map","user"],"sources":["/Users/amandasimard/Desktop/Promineo/Week-15/Lab/src/App.js"],"sourcesContent":["/* \n  Copyright (c) 2023 Promineo Tech\n  Author:  Promineo Tech Academic Team\n  Subject:  React Week 15 - REST, Fetch, Functional Components, and Best Practices\n  FE Lab Week 15\n*/\n\n/* ----------------------------------------------------- */\n// Key Term List:\n// REST\n// RESTful API\n// CRUD: Create Read Update Delete\n// HTTP Methods: POST, GET, PUT/PATCH, DELETE\n// Fetch\n// Functional Component\n// Spread Operator\n// Destructuring\n// Hooks\n// useState\n// useEffect\n// Async/Await\n// JSON.stringify()\n// fetch(URL, options)\n// onClick={(e) => myFunction(e)}\n// onChange={(e) => setState(e.target.value)}\n// onSubmit={(e) => myFunction(e)}\n//          // e.preventDefault()\n//\n\n/* ----------------------------------------------------- */\n// Please do not alter the existing code unless instructed to do so.\n// Read the comments and add your code where it is specified for each question.\n/* ----------------------------------------------------- */\n\n/**\n * For step-by-step instruction, check the README.md\n */\n\n/*------------------------ Part 1: REST & Fetch ------------------------*/\n\n/**\n * Fetch documentation: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n *\n *                      Make sure you set up a API that you can CRUD to, such as mockAPI or use\n *                      a JSON server like in the week 11/12 labs.\n *\n *                      The lab solution will use mockAPI - but you MUST update the endpoint with your own\n *                      or the CRUD operations will not work. Do not copy the API link in the lab solution.\n *\n * Part 1: Create a new const variable called: API_URL , and set it to your URL.\n *\n *         Create 4 functions, getUsers(){}, deleteUser(){}, updateUser(){}, and postNewUser(){}.\n */\n\n/*------------------------ Part 1: Setting up GET ------------------------*/\n/*\n *         Setting up getUsers() function:\n *\n * Step 1: First, let's create a place (state) to save the users from our API.\n *\n * Step 2: In our getUsers function:\n *         1) Use fetch(URL) to get from the API\n *         2) Convert the data to JSON\n *         3) setUsers() to result of that data.\n *\n\n *\n * Step 3: Use the useEffect and getUsers() to re-render our component on change:\n *\n */\n\n/*------------------------ Part 2: Setting up DELETE ------------------------*/\n\n/**\n * Reminder: fetch(url, {options})\n *\n * Step 1: Put id as a parameter in our deleteUser() function, and update\n *         our URL in fetch(API_URL) with the id parameter.\n *\n * Step 2: Add method: \"DELETE\" key/value pair to our options object\n *\n * Step 3: call .then(() => getUsers()) after your fetch() to ensure that our component\n *         gets re-rendered with the updated information.\n */\n\n/*------------------------ Part 3: Setting up POST ------------------------*/\n\n/**\n * Step 1: Inside our postNewUser() function, set up fetch() to POST.\n *\n *         Reminder: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n *\n * Step 2: Create 3 new variables with useState(): newUserName, newUserJobTitle, newUserCompanyName\n *\n *         Set them to an empty string\n *\n *         Update the body: {} part of our fetch() to POST with our new variables.\n */\n\n/*------------------------ Part 4: Setting up UPDATE ------------------------*/\n\n/** Disclaimer: There are MANY ways to handle UPDATE.\n *              This is only one way. We will be creating a form for each user,\n *              passing in a userObject to our updateUser() function, then updating the user with fetch()\n *\n *              Consider other ways after the lab is completed.\n *\n * Step 1: Set up fetch() to UPDATE in our updateUser() function.\n *         Pass in userObject as a parameter.\n *         Be sure to update the URL with userObject.id\n *\n *         Reminder: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n *\n *         Consider the necessary options key:value pairs; method/headers/body\n *\n * Step 2: Create 3 new variables with useState() like we did for POST, but for UPDATE:\n *         updatedName, updatedJobTitle, and updatedCompanyName\n *\n * Step 3: Inside the updateUser() function body, create a new variable: updatedUserObject\n *         updatedUserObject should be userObject, with it's updated name/title/company name\n *\n */\n\n/*------------------------ Part 5: Connecting All the Pieces ------------------------*/\n\n/**\n * Step 1:  Connecting our GET:\n *\n *          .map over our users variable and display every users name/jobTitle/companyName\n *\n * Step 2: Connecting our DELETE:\n *\n *         Under our map, give every user a button to delete. Return of the trash-bin: ðŸ—‘\n *         It's not in a form, so we don't need event.preventDefault()\n *\n *         use .then(() => getUsers()) after our fetch to re-render the\n *         page with the updated information.\n *\n * Step 3: Connecting our POST:\n *\n *         Create a form above your .map method to post a new user.\n *\n *         Use the onChange property and setMyVariable() on each corresponding input\n *\n *         Connect your postNewUser() function to your form button.\n *\n *         We do need event.preventDefault() because it's inside of a form.\n *\n *         You should now be POSTing new users! Is your state re-rendering?\n *         If not, your hint in how is in Part 2: Setting up DELETE\n *\n * Step 4: Connecting our UPDATE:\n *\n *     1)  There's MANY ways to handle UPDATE.\n *\n *         For this example, we're going to give every user a form to update their:\n *         name, job title, and company name.\n *\n *     2)   Inside our .map() method, below our delete button,\n *          create a new form with labels/inputs for\n *          Update name, update job title, update company name.\n *          Include a button at the bottom (this will update on click).\n *\n *     3)   Set up the onChange property on your inputs similiar to Step 3: Connecting our POST\n *\n *     4)   Give your button an onClick property. Connect your updateUser() function to it.\n *\n *          For this function, we have two goals:\n *       1. Prevent the button from refreshing the page\n *       2. Pass in a an entire user object.\n *\n *          Set up your onClick to do both.\n *\n *     5)   Test it out! Your update should now be working!\n *          Make sure the page is re-rendering with the updated information\n *          and not refreshing the page.\n *\n * Optional: Set the input values in your update form to be equal to user.name/user.jobTitle etc,\n *           so they don't initially submit empty strings.\n *\n */\n\n/*-- ALL IMPORTS HERE -- */\nimport './App.css'\nimport {useEffect, useState} from 'react'\n\nconst MOCK_API_URL = 'https://645e56dd12e0a87ac0edd618.mockapi.io/user'\n\nfunction App() {\n  /* -- YOUR CODE/CRUD OPERATIONS HERE --*/\n\nconst [users, setUsers] = useState([{}])\n\nconst [newUserName, setNewUserName] = useState('')\nconst [newUserJobTitle, setNewUserJobTitle] = useState('')\nconst [newUserCompanyName, setNewUserCompanyname] = useState('')\n\nconst [updatedName,setUpdatedName] = useState('')\nconst [updatedJobTitle, setUpdatedJobTitle] = useState('')\nconst [updatedCompanyName, setUpdatedCompanyName] = useState('')\n\nfunction getUsers(){\n  fetch(MOCK_API_URL)\n  .then(data => data.json())\n  .then(data => setUsers(data))\n}\n\nuseEffect(() => {\n  getUsers()\n  console.log(users)\n}, [])\n\nfunction deleteUser(id){\n  fetch(`${MOCK_API_URL}/${id}`, {\n    method: 'DELETE'\n  }).then(() => getUsers())\n\n}\n\nfunction postNewUser(){\n\n  fetch(MOCK_API_URL, {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      name: newUserName,\n      jobTitle: newUserJobTitle,\n      companyName: newUserCompanyName,\n    })\n  }).then(() => getUsers())\n} \n\nfunction updateUser(userObject){\n\n  let updatedUserObject = {\n    ...userObject, \n    name: updatedName, \n    jobTitle: updatedJobTitle, \n    companyName: updatedCompanyName,\n  }\n\n  fetch(`${MOCK_API_URL}/${userObject.id}`, {\n    method: 'PUT', \n    body: JSON.stringify(updatedUserObject),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(() => getUsers())\n}\n\n\n\n  return (\n    <div className=\"App\">\n      {/* CODE BELOW: PART: 5.3 Connecting our POST */}\n\n      {/* CODE BELOW: PART 5.1: Connecting our GET  //  PART 5.4: Connecting our UPDATE */}\n      {users.map(user)}\n    </div>\n  )\n}\n\nexport default App\n\n/**\n *     While this lab focused mostly on functionality over practicality,\n *     here's a couple ideas you can try implementing to make the UI/UX more user-friendly:\n *\n *    1: Having a form laid out for EVERY user isn't very UI friendly, nor realistic.\n *       Consider using a styling library like Bootstrap React/MaterialUI/SemanticUI to put\n *       each of those forms in a modal. The form inside the modal only pops up when a\n *       \"update user\" button gets clicked, and only updates the user when that modal gets submitted.\n *\n * Docs: https://react-bootstrap.github.io/components/modal/\n *\n *\n *    2: Organize the users somehow. You can use a table, CSS grid/flex.\n *       Possibly put all the users in a container, and look at the CSS property overflow:\n *\n * Docs: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\n *\n */\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,WAAW;AAClB,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAA;AAEzC,MAAMC,YAAY,GAAG,kDAAkD;AAEvE,SAASC,GAAG,GAAG;EAAA;EACb;;EAEF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAExC,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACS,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAM,CAACW,WAAW,EAACC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACjD,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACe,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEhE,SAASiB,QAAQ,GAAE;IACjBC,KAAK,CAACjB,YAAY,CAAC,CAClBkB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAACC,IAAI,IAAIhB,QAAQ,CAACgB,IAAI,CAAC,CAAC;EAC/B;EAEArB,SAAS,CAAC,MAAM;IACdkB,QAAQ,EAAE;IACVK,OAAO,CAACC,GAAG,CAACpB,KAAK,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,SAASqB,UAAU,CAACC,EAAE,EAAC;IACrBP,KAAK,CAAE,GAAEjB,YAAa,IAAGwB,EAAG,EAAC,EAAE;MAC7BC,MAAM,EAAE;IACV,CAAC,CAAC,CAACP,IAAI,CAAC,MAAMF,QAAQ,EAAE,CAAC;EAE3B;EAEA,SAASU,WAAW,GAAE;IAEpBT,KAAK,CAACjB,YAAY,EAAE;MAClByB,MAAM,EAAE,MAAM;MACdE,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE3B,WAAW;QACjB4B,QAAQ,EAAE1B,eAAe;QACzB2B,WAAW,EAAEzB;MACf,CAAC;IACH,CAAC,CAAC,CAACU,IAAI,CAAC,MAAMF,QAAQ,EAAE,CAAC;EAC3B;EAEA,SAASkB,UAAU,CAACC,UAAU,EAAC;IAE7B,IAAIC,iBAAiB,GAAG;MACtB,GAAGD,UAAU;MACbJ,IAAI,EAAErB,WAAW;MACjBsB,QAAQ,EAAEpB,eAAe;MACzBqB,WAAW,EAAEnB;IACf,CAAC;IAEDG,KAAK,CAAE,GAAEjB,YAAa,IAAGmC,UAAU,CAACX,EAAG,EAAC,EAAE;MACxCC,MAAM,EAAE,KAAK;MACbG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,iBAAiB,CAAC;MACvCT,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC,CAACT,IAAI,CAAC,MAAMF,QAAQ,EAAE,CAAC;EAC3B;EAIE,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,UAIjBd,KAAK,CAACmC,GAAG,CAACC,IAAI;EAAC;IAAA;IAAA;IAAA;EAAA,QACZ;AAEV;AAAC,GAxEQrC,GAAG;AAAA,KAAHA,GAAG;AA0EZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}