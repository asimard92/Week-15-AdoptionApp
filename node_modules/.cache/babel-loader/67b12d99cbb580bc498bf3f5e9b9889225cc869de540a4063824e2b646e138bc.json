{"ast":null,"code":"var _jsxFileName = \"/Users/amandasimard/Desktop/Promineo/Week-15/Project/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOCK_API_URL = 'https://645e56dd12e0a87ac0edd618.mockapi.io/user';\nfunction App() {\n  _s();\n  const [users, setUsers] = useState([{}]);\n  const [newCustomerName, setNewCustomerName] = useState('');\n  const [newDogType, setNewDogType] = useState('');\n  const [newCustomerAdoptionDate, setNewCustomerAdoptionDate] = useState('');\n  const [updatedName, setUpdatedName] = useState('');\n  const [updatedDogType, setUpdatedDogType] = useState('');\n  const [updatedAdoptionDate, setUpdatedAdoptionDate] = useState('');\n  function getCustomers() {\n    fetch(MOCK_API_URL).then(data => data.json()).then(data => setCustomers(data));\n  }\n  useEffect(() => {\n    getCustomers();\n    console.log(customers);\n  }, []);\n  function deleteCustomer(id) {\n    fetch(`${MOCK_API_URL}/${id}`, {\n      method: 'DELETE'\n    }).then(() => getCustomers());\n  }\n  function postNewCustomer(e) {\n    e.preventDefault();\n    fetch(MOCK_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: newCustomerName,\n        dogType: newDogType,\n        adoptionDate: newCustomerAdoptionDate\n      })\n    }).then(() => getCustomers());\n  }\n  function updateCustomer(e, customerObject) {\n    e.preventDefault();\n    let updatedUserObject = {\n      ...userObject,\n      name: updatedName,\n      dogType: updatedDogType,\n      adoptionDate: updatedAdoptionDate\n    };\n    fetch(`${MOCK_API_URL}/${userObject.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedUserObject),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(() => getUsers());\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Post New User Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setNewUserName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Job Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setNewDogType(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Adoption Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        onChange: e => setNewUserAdoptionDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => postNewUser(e),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), users.map((user, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Name: \", user.name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }, this), \"Job Title: \", user.dogType, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 41\n        }, this), \"Company Name: \", user.adoptionDate, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 49\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteCustomer(user.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Update This User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Update Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setUpdatedName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 79\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Update Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setUpdatedDogType(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 82\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Update Company Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          onChange: e => setUpdatedAdoptionDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 99\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateUser(e, user),\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SgHOX47EVOEvaePnLTxiXQzdN7g=\");\n_c = App;\nexport default App;\n\n/**\n *     While this lab focused mostly on functionality over practicality,\n *     here's a couple ideas you can try implementing to make the UI/UX more user-friendly:\n *\n *    1: Having a form laid out for EVERY user isn't very UI friendly, nor realistic.\n *       Consider using a styling library like Bootstrap React/MaterialUI/SemanticUI to put\n *       each of those forms in a modal. The form inside the modal only pops up when a\n *       \"update user\" button gets clicked, and only updates the user when that modal gets submitted.\n *\n * Docs: https://react-bootstrap.github.io/components/modal/\n *\n *\n *    2: Organize the users somehow. You can use a table, CSS grid/flex.\n *       Possibly put all the users in a container, and look at the CSS property overflow:\n *\n * Docs: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\n *\n */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","MOCK_API_URL","App","users","setUsers","newCustomerName","setNewCustomerName","newDogType","setNewDogType","newCustomerAdoptionDate","setNewCustomerAdoptionDate","updatedName","setUpdatedName","updatedDogType","setUpdatedDogType","updatedAdoptionDate","setUpdatedAdoptionDate","getCustomers","fetch","then","data","json","setCustomers","console","log","customers","deleteCustomer","id","method","postNewCustomer","e","preventDefault","headers","body","JSON","stringify","name","dogType","adoptionDate","updateCustomer","customerObject","updatedUserObject","userObject","getUsers","setNewUserName","target","value","setNewUserAdoptionDate","postNewUser","map","user","index","updateUser"],"sources":["/Users/amandasimard/Desktop/Promineo/Week-15/Project/src/App.js"],"sourcesContent":["import './App.css'\nimport {useEffect, useState} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.js';\n\nconst MOCK_API_URL = 'https://645e56dd12e0a87ac0edd618.mockapi.io/user'\n\nfunction App() {\n\nconst [users, setUsers] = useState([{}])\n\nconst [newCustomerName, setNewCustomerName] = useState('')\nconst [newDogType, setNewDogType] = useState('')\nconst [newCustomerAdoptionDate, setNewCustomerAdoptionDate] = useState('')\n\nconst [updatedName,setUpdatedName] = useState('')\nconst [updatedDogType, setUpdatedDogType] = useState('')\nconst [updatedAdoptionDate, setUpdatedAdoptionDate] = useState('')\n\nfunction getCustomers(){\n  fetch(MOCK_API_URL)\n  .then(data => data.json())\n  .then(data => setCustomers(data))\n}\n\nuseEffect(() => {\n  getCustomers()\n  console.log(customers)\n}, [])\n\nfunction deleteCustomer(id){\n  fetch(`${MOCK_API_URL}/${id}`, {\n    method: 'DELETE'\n  }).then(() => getCustomers())\n\n}\n\nfunction postNewCustomer(e){\n  e.preventDefault()\n\n  fetch(MOCK_API_URL, {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      name: newCustomerName,\n      dogType: newDogType,  \n      adoptionDate: newCustomerAdoptionDate,\n    })\n  }).then(() => getCustomers())\n} \n\nfunction updateCustomer(e, customerObject){\n  e.preventDefault()\n\n  let updatedUserObject = {\n    ...userObject, \n    name: updatedName, \n    dogType: updatedDogType, \n    adoptionDate: updatedAdoptionDate,\n  }\n\n  fetch(`${MOCK_API_URL}/${userObject.id}`, {\n    method: 'PUT', \n    body: JSON.stringify(updatedUserObject),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(() => getUsers())\n}\n\n\n\n  return (\n    <div className=\"App\">\n\n      <form>\n        <h3>Post New User Form</h3>\n        <label>Name</label>\n        <input onChange={(e) => setNewUserName(e.target.value)}></input>\n        <label>Job Title</label>\n        <input onChange={(e) => setNewDogType(e.target.value)}></input>\n        <label>Adoption Date</label>\n        <input type=\"date\" onChange={(e) => setNewUserAdoptionDate(e.target.value)}></input>\n        <button onClick={(e) => postNewUser(e)}>Submit</button>\n      </form>\n\n      {users.map((user, index) => (\n        <div className='userContainer' key={index}>\n            <div>\n              Name: {user.name} <br />\n              Job Title: {user.dogType} <br />\n              Company Name: {user.adoptionDate} <br />\n              <button onClick={() => deleteCustomer(user.id)}>Delete</button>\n            </div>\n            <form>\n              <h3>Update This User</h3>\n              <label>Update Name</label>\n              <input onChange={(e) => setUpdatedName(e.target.value)}></input><br />             \n              <label>Update Title</label>\n              <input onChange={(e) => setUpdatedDogType(e.target.value)}></input><br />\n              <label>Update Company Name</label>\n              <input type=\"date\" onChange={(e) => setUpdatedAdoptionDate(e.target.value)}></input><br /> \n              <button onClick={(e) => updateUser(e, user)}>Update</button>\n            </form>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n\n/**\n *     While this lab focused mostly on functionality over practicality,\n *     here's a couple ideas you can try implementing to make the UI/UX more user-friendly:\n *\n *    1: Having a form laid out for EVERY user isn't very UI friendly, nor realistic.\n *       Consider using a styling library like Bootstrap React/MaterialUI/SemanticUI to put\n *       each of those forms in a modal. The form inside the modal only pops up when a\n *       \"update user\" button gets clicked, and only updates the user when that modal gets submitted.\n *\n * Docs: https://react-bootstrap.github.io/components/modal/\n *\n *\n *    2: Organize the users somehow. You can use a table, CSS grid/flex.\n *       Possibly put all the users in a container, and look at the CSS property overflow:\n *\n * Docs: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\n *\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}